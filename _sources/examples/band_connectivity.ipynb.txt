{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sewing band structure by subduced representation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load modules and prepare functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spgrep_modulation==0.1.dev33+gc7ed76b.d20220823\n"
     ]
    }
   ],
   "source": [
    "from __future__ import annotations\n",
    "\n",
    "from pathlib import Path\n",
    "import warnings\n",
    "from itertools import product\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import phonopy\n",
    "import seekpath\n",
    "import numpy as np\n",
    "import networkx as nx\n",
    "\n",
    "import spgrep_modulation\n",
    "from spgrep.group import get_little_group\n",
    "from spgrep.representation import get_character\n",
    "from spgrep_modulation.modulation import Modulation\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "print(f\"spgrep_modulation=={spgrep_modulation.__version__}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.set_context(\"poster\")\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_nodes(qpoint, eigenspaces):\n",
    "    nodes = []\n",
    "    for eigenvalue, _, irrep in eigenspaces:\n",
    "        capacity = irrep.shape[1]\n",
    "        character = get_character(irrep)\n",
    "        nodes.append((qpoint, character, eigenvalue, capacity))\n",
    "    return nodes\n",
    "\n",
    "\n",
    "def enumerate_non_overlapped_paths(\n",
    "    adj: dict[int, list[int]], source: int, destination: int\n",
    ") -> list[list[int]]:\n",
    "    all_paths = []\n",
    "    while len(adj[source]) > 0:\n",
    "        path = []\n",
    "        head = source\n",
    "        while (head != destination) and (len(adj[head]) > 0):\n",
    "            path.append(head)\n",
    "            head = adj[head].pop()\n",
    "        all_paths.append(path[1:])  # Ignore source\n",
    "\n",
    "    return all_paths\n",
    "\n",
    "\n",
    "def sew_bands(\n",
    "    ph: phonopy.Phonopy,\n",
    "    start: list[float],\n",
    "    stop: list[float],\n",
    "    num: int = 17,\n",
    "):\n",
    "    nodes_info = []\n",
    "    nodes = []\n",
    "    ratios = np.linspace(0, 1, num=num, endpoint=True)\n",
    "    for ratio in ratios:\n",
    "        qpoint = np.array(start) * (1 - ratio) + np.array(stop) * ratio\n",
    "        md = Modulation.with_supercell_and_symmetry_search(\n",
    "            dynamical_matrix=ph.dynamical_matrix,\n",
    "            supercell_matrix=[2, 2, 2],\n",
    "            qpoint=qpoint,\n",
    "            factor=ph.unit_conversion_factor,\n",
    "        )\n",
    "        nodes_info.append(\n",
    "            {\n",
    "                \"qpoint\": qpoint,\n",
    "                \"little_rotations\": md.little_rotations,\n",
    "                \"little_translations\": md.little_translations,\n",
    "                \"nodes\": list(range(len(nodes), len(nodes) + len(md.eigenspaces))),\n",
    "            }\n",
    "        )\n",
    "        nodes.extend(get_nodes(qpoint, md.eigenspaces))\n",
    "\n",
    "    def _saw_consecutive_points(nodes_info1, nodes_info2):\n",
    "        # Assume len(nodes_info1[1].shape[1]) >= len(nodes_info2[1].shape[1])\n",
    "        graph = nx.DiGraph()\n",
    "        graph.add_nodes_from(nodes_info1[\"nodes\"])\n",
    "        graph.add_nodes_from(nodes_info2[\"nodes\"])\n",
    "\n",
    "        _, _, mapping = get_little_group(\n",
    "            rotations=nodes_info1[\"little_rotations\"],\n",
    "            translations=nodes_info1[\"little_translations\"],\n",
    "            kpoint=nodes_info2[\"qpoint\"],\n",
    "        )\n",
    "        for node_idx1 in nodes_info1[\"nodes\"]:\n",
    "            _, character1, eigenvalue1, _ = nodes[node_idx1]\n",
    "            subduced_character = character1[mapping]\n",
    "            for node_idx2 in nodes_info2[\"nodes\"]:\n",
    "                _, character2, eigenvalue2, capacity2 = nodes[node_idx2]\n",
    "                count = np.sum(np.conj(subduced_character) * character2) / len(mapping)\n",
    "                count = np.around(np.real(count)).astype(int)\n",
    "                if count >= 1:\n",
    "                    # Work around to stop min-cost-flow algorithm\n",
    "                    weight = abs(eigenvalue1 - eigenvalue2)\n",
    "                    weight = int(weight * 1e3)\n",
    "                    graph.add_edge(node_idx1, node_idx2, weight=weight, capacity=capacity2)\n",
    "\n",
    "        source = len(nodes) + 1\n",
    "        destination = source + 1\n",
    "        demand = 3 * len(ph.primitive)  # Number of branches\n",
    "        graph.add_node(source, demand=-demand)\n",
    "        graph.add_node(destination, demand=demand)\n",
    "        for node_idx1 in nodes_info1[\"nodes\"]:\n",
    "            capacity = nodes[node_idx1][3]\n",
    "            graph.add_edge(source, node_idx1, weight=0, capacity=capacity)\n",
    "        for node_idx2 in nodes_info2[\"nodes\"]:\n",
    "            capacity = nodes[node_idx2][3]\n",
    "            graph.add_edge(node_idx2, destination, weight=0, capacity=capacity)\n",
    "\n",
    "        flowdict = nx.min_cost_flow(graph)\n",
    "\n",
    "        active_edges = {}\n",
    "        for src, dst_flow in flowdict.items():\n",
    "            for dst, flow in dst_flow.items():\n",
    "                if src in active_edges:\n",
    "                    active_edges[src].extend([dst for _ in range(flow)])\n",
    "                else:\n",
    "                    active_edges[src] = [dst for _ in range(flow)]\n",
    "        all_paths = enumerate_non_overlapped_paths(active_edges, source, destination)\n",
    "\n",
    "        return all_paths\n",
    "\n",
    "    all_paths = []\n",
    "    for nodes_info1, nodes_info2 in zip(nodes_info[:-1], nodes_info[1:-1]):\n",
    "        all_paths.extend(_saw_consecutive_points(nodes_info1, nodes_info2))\n",
    "    # Reverse the last path\n",
    "    all_paths.extend(\n",
    "        [(src, dst) for (dst, src) in _saw_consecutive_points(nodes_info[-1], nodes_info[-2])]\n",
    "    )\n",
    "\n",
    "    adj = {node_idx: [] for node_idx in range(len(nodes) + 2)}\n",
    "    for src, dst in all_paths:\n",
    "        adj[src].append(dst)\n",
    "\n",
    "    # Add dummy source and destination nodes\n",
    "    source = len(nodes) + 1\n",
    "    destination = source + 1\n",
    "    for node_idx in nodes_info[0][\"nodes\"]:\n",
    "        capacity = nodes[node_idx][3]\n",
    "        adj[source].extend([node_idx for _ in range(capacity)])\n",
    "    for node_idx in nodes_info[-1][\"nodes\"]:\n",
    "        capacity = nodes[node_idx][3]\n",
    "        adj[node_idx].extend([destination for _ in range(capacity)])\n",
    "\n",
    "    connections = enumerate_non_overlapped_paths(adj, source, destination)\n",
    "    return nodes, nodes_info, connections, ratios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare `Phonopy` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = Path().resolve().parent.parent / \"tests\" / \"phonopy_mp-661.yaml.xz\"\n",
    "ph = phonopy.load(path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sewing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "band_path = seekpath.get_path(ph.primitive.totuple())\n",
    "label1, label2 = band_path[\"path\"][0]\n",
    "nodes, nodes_info, connections, ratios = sew_bands(\n",
    "    ph, band_path[\"point_coords\"][label1], band_path[\"point_coords\"][label2], num=129\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot band structure with connection\n",
    "\n",
    "Yellow and light blue branches seem to be mis-identified.\n",
    "They have the equivalent irreps between Gamma and M points.\n",
    "Thus, there is no way to distinguish them only from symmetry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, 'GAMMA'), Text(1, 0, 'M')]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 486x777.6 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6.75, 6.75 * 1.6))\n",
    "for i, (connection, ratio) in enumerate(zip(connections, ratios)):\n",
    "    color = f\"C{i}\"\n",
    "    # nodes[idx] = (qpoint, character, eigenvalue, capacity)\n",
    "    frequencies = [ph.unit_conversion_factor * nodes[idx][2] for idx in connection]\n",
    "    ax.plot(ratios[1:], frequencies[1:], color=color)\n",
    "\n",
    "ax.set_xlabel(\"Wave vector\")\n",
    "ax.set_ylabel(\"Frequency (THz)\")\n",
    "ax.set_xticks([0, 1])\n",
    "ax.set_xticklabels([label1, label2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.4 ('spgrep')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "88c77d0dd5409a9a505b149d1d516cb944fb2ee79f549abf35dc2e7bd6c12498"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
